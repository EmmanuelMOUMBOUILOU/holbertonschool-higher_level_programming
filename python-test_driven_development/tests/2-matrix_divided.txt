============================
How to Use 2-matrix_divided.py
============================

This module defines the function ``matrix_divided(matrix, div)``.

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Basic usage:

    >>> matrix = [[4, 8], [16, 24]]
    >>> matrix_divided(matrix, 4)
    [[1.0, 2.0], [4.0, 6.0]]

    >>> matrix = [[1.5, 2.5], [3.5, 4.5]]
    >>> matrix_divided(matrix, 0.5)
    [[3.0, 5.0], [7.0, 9.0]]

    >>> matrix = [[-2, -4], [-6, -8]]
    >>> matrix_divided(matrix, 2)
    [[-1.0, -2.0], [-3.0, -4.0]]

Mixed int/float values:

    >>> matrix = [[2.2, 4], [6.0, 8]]
    >>> matrix_divided(matrix, 2)
    [[1.1, 2.0], [3.0, 4.0]]

Matrix with one row:

    >>> matrix_divided([[10, 20, 30]], 10)
    [[1.0, 2.0, 3.0]]

Matrix with one element:

    >>> matrix_divided([[100]], 10)
    [[10.0]]

Now let's test some error cases:

If div is not a number:

    >>> matrix_divided([[1, 2], [3, 4]], "two")
    Traceback (most recent call last):
    TypeError: div must be a number

If div is zero:

    >>> matrix_divided([[1, 2], [3, 4]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

If matrix contains non-numeric types:

    >>> matrix_divided([[1, 2], ["3", 4]], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

If matrix is not a list of lists:

    >>> matrix_divided("not a matrix", 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([1, 2, 3], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

If matrix rows are not the same size:

    >>> matrix_divided([[1, 2], [3, 4, 5]], 2)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size
